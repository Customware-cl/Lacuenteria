name: Verificaci√≥n funcionamiento CORE

on:
  issue_comment:
    types: [created]

jobs:
  check-comment:
    # Solo ejecutar en comentarios de PR que contengan @QA_lacuenteria
    if: github.event.issue.pull_request && contains(github.event.comment.body, '@QA_lacuenteria')
    runs-on: ubuntu-latest
    outputs:
      should-run: ${{ steps.check.outputs.should-run }}
    steps:
      - name: Check if comment contains trigger
        id: check
        run: |
          echo "should-run=true" >> $GITHUB_OUTPUT
          echo "üöÄ Trigger detectado: @QA_lacuenteria"
      
      - name: Add reaction to comment
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id,
              content: 'rocket'
            })
      
      - name: Post initial status comment
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: 'ü§ñ **QA Bot**: Iniciando verificaci√≥n de funcionamiento CORE...\n\n‚è≥ Este proceso puede tomar varios minutos.'
            })
  
  cypress-run:
    needs: check-comment
    if: needs.check-comment.outputs.should-run == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version: [18.x]
    steps:
      - name: Get PR branch
        uses: actions/github-script@v6
        id: get-pr
        with:
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            core.setOutput('head-ref', pr.data.head.ref);
            core.setOutput('head-sha', pr.data.head.sha);
            console.log(`PR branch: ${pr.data.head.ref}, SHA: ${pr.data.head.sha}`);
      
      - name: Checkout PR
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.get-pr.outputs.head-sha }}
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Build
        run: npm run build
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          VITE_SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.VITE_SUPABASE_SERVICE_ROLE_KEY }}
          CLEANUP_API_KEY: ${{ secrets.CLEANUP_API_KEY }}
      - name: === PRUEBAS DE CONTROL ===
        uses: cypress-io/github-action@v5
        with:
          build: npm run build
          start: npm run preview
          wait-on: 'http://localhost:4173'
          browser: chrome
          record: false
          command-timeout: 10000
          default-command-timeout: 10000
          spec: cypress/e2e/complete_story_flow.cy.js
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          VITE_SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.VITE_SUPABASE_SERVICE_ROLE_KEY }}
          CLEANUP_API_KEY: ${{ secrets.CLEANUP_API_KEY }}
          TEST_USER_EMAIL: 'tester@lacuenteria.cl'
      - name: Upload screenshots
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-screenshots
          path: cypress/screenshots
      - name: Upload videos
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-videos
          path: cypress/videos
      
      - name: Post result comment
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const status = '${{ job.status }}';
            const runUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            
            let message = '';
            if (status === 'success') {
              message = `‚úÖ **QA Bot**: Verificaci√≥n completada exitosamente!\n\nTodas las pruebas CORE pasaron correctamente.`;
            } else if (status === 'failure') {
              message = `‚ùå **QA Bot**: La verificaci√≥n fall√≥.\n\nAlgunas pruebas no pasaron. Por favor revisa los logs y capturas.`;
            } else {
              message = `‚ö†Ô∏è **QA Bot**: La verificaci√≥n fue cancelada o tuvo un error inesperado.`;
            }
            
            message += `\n\n[Ver detalles de la ejecuci√≥n](${runUrl})`;
            
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: message
            });
