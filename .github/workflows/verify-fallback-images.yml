name: Verify Fallback Images

on:
  push:
    paths:
      - 'supabase/storage/fallback-images/**'
  pull_request:
    paths:
      - 'supabase/storage/fallback-images/**'

jobs:
  verify-images:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y imagemagick webp
      
      - name: Verify fallback images
        run: |
          chmod +x scripts/verify_fallback_images.sh
          ./scripts/verify_fallback_images.sh
      
      - name: Check image dimensions
        run: |
          for img in supabase/storage/fallback-images/*.webp; do
            if [ -f "$img" ]; then
              dimensions=$(identify -format "%wx%h" "$img")
              if [ "$dimensions" != "800x800" ]; then
                echo "Error: $img does not have the required dimensions (800x800). Actual: $dimensions"
                exit 1
              fi
              echo "$img: $dimensions ✓"
            fi
          done
      
      - name: Check image size
        run: |
          for img in supabase/storage/fallback-images/*.webp; do
            if [ -f "$img" ]; then
              size=$(du -k "$img" | cut -f1)
              if [ "$size" -gt 500 ]; then
                echo "Error: $img exceeds the maximum size (500KB). Actual: ${size}KB"
                exit 1
              fi
              echo "$img: ${size}KB ✓"
            fi
          done
      
      - name: Check image format
        run: |
          for img in supabase/storage/fallback-images/*.webp; do
            if [ -f "$img" ]; then
              format=$(identify -format "%m" "$img")
              if [ "$format" != "WEBP" ]; then
                echo "Error: $img is not in WebP format. Actual: $format"
                exit 1
              fi
              echo "$img: $format ✓"
            fi
          done

